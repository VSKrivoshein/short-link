// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/delete-user": {
            "delete": {
                "description": "Delete existed user with all user links",
                "tags": [
                    "auth"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "description": "valid email and password of existed user",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.DeleteUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "login or password is incorrect",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "422": {
                        "description": "incorrect struct of request or validation failed",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    }
                }
            }
        },
        "/auth/sign-in": {
            "post": {
                "description": "Sign in for existed user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign in",
                "parameters": [
                    {
                        "description": "valid email and password of existed user",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SignInInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "login or password is incorrect",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "422": {
                        "description": "incorrect struct of request or validation failed",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    }
                }
            }
        },
        "/auth/sign-out": {
            "get": {
                "description": "Remove jwt token",
                "tags": [
                    "auth"
                ],
                "summary": "Sign out",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/sign-up": {
            "post": {
                "description": "Registration of new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign up",
                "parameters": [
                    {
                        "description": "valid email and password more than 6 chars",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SignUpInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "email already exist",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "422": {
                        "description": "incorrect struct of request or validation failed",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check that service alive and ready for traffic",
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "I am alive",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": ""
                    }
                }
            }
        },
        "/links/create": {
            "post": {
                "description": "Creating new redirect from valid url for authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Creating redirect",
                "parameters": [
                    {
                        "description": "valid url",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateLinkInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "link and redirect url",
                        "schema": {
                            "$ref": "#/definitions/api.CreateLinkResp"
                        }
                    },
                    "401": {
                        "description": "user should be authenticated",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "409": {
                        "description": "link is already exist",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "422": {
                        "description": "incorrect struct of request or validation failed",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    }
                }
            }
        },
        "/links/delete": {
            "delete": {
                "description": "Delete link with hash",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Delete link",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "user should be authenticated",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "422": {
                        "description": "link was not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    }
                }
            }
        },
        "/links/get-all": {
            "get": {
                "description": "Get all links that belong to user wit hash",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Get all links that belong to user wit hash",
                "responses": {
                    "200": {
                        "description": "pair with link and redirect link",
                        "schema": {
                            "$ref": "#/definitions/api.GetAllLinksResp"
                        }
                    },
                    "401": {
                        "description": "user should be authenticated",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "422": {
                        "description": "incorrect struct of request or validation failed",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    }
                }
            }
        },
        "/{hash}": {
            "get": {
                "description": "url with hash will \"redirect\" user to link from service",
                "tags": [
                    "redirect"
                ],
                "summary": "Redirect",
                "parameters": [
                    {
                        "type": "string",
                        "description": "hash that was generated during creating link",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "redirect user to link",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "link was not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.CreateLinkInput": {
            "type": "object",
            "required": [
                "link"
            ],
            "properties": {
                "link": {
                    "type": "string",
                    "example": "https://ya.ru/"
                }
            }
        },
        "api.CreateLinkResp": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string",
                    "example": "https://ya.ru/"
                },
                "redirect_url": {
                    "type": "string",
                    "example": "localhost:8080/a425tq"
                }
            }
        },
        "api.DeleteUserInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@mail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "qwerty"
                }
            }
        },
        "api.ErrResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "user definition of error"
                }
            }
        },
        "api.GetAllLinksResp": {
            "type": "object",
            "properties": {
                "all_user_links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "short url": "original url"
                    }
                }
            }
        },
        "api.SignInInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@mail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "qwerty"
                }
            }
        },
        "api.SignUpInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@mail.ru"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "qwerty"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Short link with authorization",
	Description: "Service of the short link with authorization, hexagonal architecture, integration test",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
